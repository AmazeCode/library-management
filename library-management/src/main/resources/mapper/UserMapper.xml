<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.book.management.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="com.book.management.model.User" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="user_password" property="userPassword" jdbcType="VARCHAR" />
    <result column="real_name" property="realName" jdbcType="VARCHAR" />
    <result column="user_email" property="userEmail" jdbcType="VARCHAR" />
    <result column="user_phone" property="userPhone" jdbcType="VARCHAR" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, user_name, user_password, real_name, user_email, user_phone, state, create_time, 
    update_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from t_user
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from t_user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.book.management.model.User" >
    insert into t_user (id, user_name, user_password, 
      real_name, user_email, user_phone, 
      state, create_time, update_time
      )
    values (#{id,jdbcType=BIGINT}, #{userName,jdbcType=VARCHAR}, #{userPassword,jdbcType=VARCHAR}, 
      #{realName,jdbcType=VARCHAR}, #{userEmail,jdbcType=VARCHAR}, #{userPhone,jdbcType=VARCHAR}, 
      #{state,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.book.management.model.User" >
    insert into t_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userName != null" >
        user_name,
      </if>
      <if test="userPassword != null" >
        user_password,
      </if>
      <if test="realName != null" >
        real_name,
      </if>
      <if test="userEmail != null" >
        user_email,
      </if>
      <if test="userPhone != null" >
        user_phone,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userPassword != null" >
        #{userPassword,jdbcType=VARCHAR},
      </if>
      <if test="realName != null" >
        #{realName,jdbcType=VARCHAR},
      </if>
      <if test="userEmail != null" >
        #{userEmail,jdbcType=VARCHAR},
      </if>
      <if test="userPhone != null" >
        #{userPhone,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="com.book.management.model.User" >
    update t_user
    <set >
      <if test="userName != null" >
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userPassword != null" >
        user_password = #{userPassword,jdbcType=VARCHAR},
      </if>
      <if test="realName != null" >
        real_name = #{realName,jdbcType=VARCHAR},
      </if>
      <if test="userEmail != null" >
        user_email = #{userEmail,jdbcType=VARCHAR},
      </if>
      <if test="userPhone != null" >
        user_phone = #{userPhone,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="updateByPrimaryKey" parameterType="com.book.management.model.User" >
    update t_user
    set user_name = #{userName,jdbcType=VARCHAR},
      user_password = #{userPassword,jdbcType=VARCHAR},
      real_name = #{realName,jdbcType=VARCHAR},
      user_email = #{userEmail,jdbcType=VARCHAR},
      user_phone = #{userPhone,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <!-- 根据用户名查询用户信息 -->
  <select id="findUserByUserName" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from t_user where  user_name = #{userName,jdbcType=VARCHAR}
  </select>

  <!-- 条件查询用户数据 -->
  <select id="selectUserList" resultMap="BaseResultMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    from t_user
    <where>
      <if test="userName != null and userName != ''">
        user_name like concat('%',#{userName},'%')
      </if>
      <if test="userTrueName != null and userTrueName != ''">
        and real_name like concat('%',#{realName},'%')
      </if>
      <if test="userEmail != null and userEmail != ''">
        and user_email like #{userEmail}
      </if>
      <if test="userPhone != null and userPhone != ''">
        and user_phone like concat('%',#{userPhone},'%')
      </if>
    </where>
    <if test="start!=null and size!=null">
      limit #{start}, #{size}
    </if>
  </select>

  <!-- 根据条件查询用户总条数 -->
  <select id="getTotalUser" resultType="java.lang.Integer" parameterType="java.util.Map">
    select
      count(*)
    from t_user
    <where>
      <if test="userName != null and userName != ''">
        user_name like concat('%',#{userName},'%')
      </if>
      <if test="userTrueName != null and userTrueName != ''">
        and real_name like concat('%',#{realName},'%')
      </if>
      <if test="userEmail != null and userEmail != ''">
        and user_email like concat('%',#{userEmail},'%')
      </if>
      <if test="userPhone != null and userPhone != ''">
        and user_phone like concat('%',#{userPhone},'%')
      </if>
    </where>
  </select>

  <!-- 用户id校验 -->
  <select id="checkUserIsExist" resultType="java.lang.Integer" >
    select count(1)
    from t_user
    where id = #{id,jdbcType=BIGINT}
  </select>

  <!-- 用户信息校验 -->
  <select id="checkUserInfoExist" resultType="java.lang.Integer" parameterType="java.util.Map">
    select count(1)
    from t_user
    where
    <if test="userName != null  and userName != ''">
     user_name = #{userName,jdbcType=VARCHAR}
    </if>
    <if test="userEmail != null and userEmail !=''">
     user_email = #{userEmail,jdbcType=VARCHAR}
    </if>
    <if test="userPhone != null and userPhone !=''">
     user_phone = #{userPhone,jdbcType=VARCHAR}
    </if>
    <if test="id != null">
      and id != #{id,jdbcType=BIGINT}
    </if>
  </select>
  <!-- 修改用户状态 -->
  <update id="updateUserState" parameterType="java.util.Map">
    update t_user set state = #{state,jdbcType=INTEGER} where id = #{id,jdbcType=BIGINT}
  </update>

  <!-- 添加用户角色关联 -->
  <insert id="insertUserRoles" parameterType="Map">
    insert into t_role_user (user_id, role_id ) values
    <foreach collection="roleIds" item="roleId" separator=",">
      ( #{userId}, #{roleId} )
    </foreach>
  </insert>

  <!-- 删除用户角色关联 -->
  <delete id="deleteRoleUserByRoleId" parameterType="map">
    delete from t_role_user where role_id = #{roleId}
  </delete>

  </mapper>