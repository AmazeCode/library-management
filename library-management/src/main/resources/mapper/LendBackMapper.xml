<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.book.management.dao.LendBackMapper" >
  <resultMap id="BaseResultMap" type="com.book.management.model.LendBack" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="book_id" property="bookId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="lend_date" property="lendDate" jdbcType="DATE" />
    <result column="should_lend_days" property="shouldLendDays" jdbcType="INTEGER" />
    <result column="should_return_date" property="shouldReturnDate" jdbcType="DATE" />
    <result column="return_date" property="returnDate" jdbcType="DATE" />
    <result column="is_damage" property="isDamage" jdbcType="INTEGER" />
    <result column="damage_degree" property="damageDegree" jdbcType="VARCHAR" />
    <result column="note" property="note" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, book_id, user_id, lend_date, should_lend_days, should_return_date, return_date, 
    is_damage, damage_degree, note
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_lend_back
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_lend_back
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.book.management.model.LendBack" >
    insert into t_lend_back (id, book_id, user_id, 
      lend_date, should_lend_days, should_return_date, 
      return_date, is_damage, damage_degree, 
      note)
    values (#{id,jdbcType=INTEGER}, #{bookId,jdbcType=INTEGER}, #{userId,jdbcType=BIGINT}, 
      #{lendDate,jdbcType=DATE}, #{shouldLendDays,jdbcType=INTEGER}, #{shouldReturnDate,jdbcType=DATE}, 
      #{returnDate,jdbcType=DATE}, #{isDamage,jdbcType=INTEGER}, #{damageDegree,jdbcType=VARCHAR}, 
      #{note,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.book.management.model.LendBack" >
    insert into t_lend_back
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="bookId != null" >
        book_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="lendDate != null" >
        lend_date,
      </if>
      <if test="shouldLendDays != null" >
        should_lend_days,
      </if>
      <if test="shouldReturnDate != null" >
        should_return_date,
      </if>
      <if test="returnDate != null" >
        return_date,
      </if>
      <if test="isDamage != null" >
        is_damage,
      </if>
      <if test="damageDegree != null" >
        damage_degree,
      </if>
      <if test="note != null" >
        note,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="bookId != null" >
        #{bookId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="lendDate != null" >
        #{lendDate,jdbcType=DATE},
      </if>
      <if test="shouldLendDays != null" >
        #{shouldLendDays,jdbcType=INTEGER},
      </if>
      <if test="shouldReturnDate != null" >
        #{shouldReturnDate,jdbcType=DATE},
      </if>
      <if test="returnDate != null" >
        #{returnDate,jdbcType=DATE},
      </if>
      <if test="isDamage != null" >
        #{isDamage,jdbcType=INTEGER},
      </if>
      <if test="damageDegree != null" >
        #{damageDegree,jdbcType=VARCHAR},
      </if>
      <if test="note != null" >
        #{note,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.book.management.model.LendBack" >
    update t_lend_back
    <set >
      <if test="bookId != null" >
        book_id = #{bookId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="lendDate != null" >
        lend_date = #{lendDate,jdbcType=DATE},
      </if>
      <if test="shouldLendDays != null" >
        should_lend_days = #{shouldLendDays,jdbcType=INTEGER},
      </if>
      <if test="shouldReturnDate != null" >
        should_return_date = #{shouldReturnDate,jdbcType=DATE},
      </if>
      <if test="returnDate != null" >
        return_date = #{returnDate,jdbcType=DATE},
      </if>
      <if test="isDamage != null" >
        is_damage = #{isDamage,jdbcType=INTEGER},
      </if>
      <if test="damageDegree != null" >
        damage_degree = #{damageDegree,jdbcType=VARCHAR},
      </if>
      <if test="note != null" >
        note = #{note,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.book.management.model.LendBack" >
    update t_lend_back
    set book_id = #{bookId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=BIGINT},
      lend_date = #{lendDate,jdbcType=DATE},
      should_lend_days = #{shouldLendDays,jdbcType=INTEGER},
      should_return_date = #{shouldReturnDate,jdbcType=DATE},
      return_date = #{returnDate,jdbcType=DATE},
      is_damage = #{isDamage,jdbcType=INTEGER},
      damage_degree = #{damageDegree,jdbcType=VARCHAR},
      note = #{note,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!-- 查询图书信息 -->
  <select id="selectBookInfoAndUserByBookId" resultType="com.book.management.model.LendBack" parameterType="int">
      SELECT
        book_name  "bookInfo.bookName",
        book_state  "bookInfo.bookState",
        l.user_id userId,
        l.id Id,
        real_name "user.realName",
        lend_date lendDate,
        should_return_date shouldReturnDate
    FROM
        t_lend_back l,
        t_book_info b,
				t_user u
    WHERE
        l.book_id = b.id
        AND l.user_id = u.id
        AND l.book_id=#{bookId}
        AND return_date is null
  </select>
  <!-- 分页查询借书记录集合 -->
  <select id="selectLendReturnRecordByUserId" resultType="com.book.management.model.LendBack"
          parameterType="map">
    SELECT
    book_name "bookInfo.bookName",
    lend_date lendDate,
    return_date returnDate,
    should_return_date shouldReturnDate,
    damage_degree damageDegree
    FROM
    t_lend_back tlb,t_book_info tbi
    WHERE
    tlb.book_id=tbi.id
    AND
    tlb.user_id=#{userId}
    <if test="start!=null and size!=null">
      limit #{start}, #{size}
    </if>
  </select>
  <!-- f查询借书记录集合 -->
  <select id="getTotalRecord" resultType="java.lang.Integer" parameterType="map">
        select count(*) from t_lend_back
        where user_id=#{userId}
    </select>
</mapper>